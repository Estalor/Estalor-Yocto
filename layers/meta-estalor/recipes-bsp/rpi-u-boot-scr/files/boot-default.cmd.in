# Load the device tree
fdt addr ${fdt_addr} && fdt get value bootargs /chosen bootargs

test -n "${BOOT_ORDER}" || setenv BOOT_ORDER "A B"
test -n "${BOOT_A_LEFT}" || setenv BOOT_A_LEFT 3
test -n "${BOOT_B_LEFT}" || setenv BOOT_B_LEFT 3

setenv boot_partition
setenv kernel_partition
setenv rootfs_partition
setenv raucslot

for BOOT_SLOT in "${BOOT_ORDER}"; do
  if test "x${rootfs_partition}" != "x"; then
    # skip remaining slots
  elif test "x${BOOT_SLOT}" = "xA"; then
    if test ${BOOT_A_LEFT} -gt 0; then
      setexpr BOOT_A_LEFT ${BOOT_A_LEFT} - 1
      echo "Found valid RAUC slot A"
      setenv boot_partition 1
      setenv kernel_partition 1
      setenv rootfs_partition "/dev/mmcblk0p4"
      setenv raucslot "A"
    fi
  elif test "x${BOOT_SLOT}" = "xB"; then
    if test ${BOOT_B_LEFT} -gt 0; then
      setexpr BOOT_B_LEFT ${BOOT_B_LEFT} - 1
      echo "Found valid RAUC slot B"
      setenv boot_partition 1
      setenv kernel_partition 1
      setenv rootfs_partition "/dev/mmcblk0p5"
      setenv raucslot "B"
    fi
  fi
done

if test -n "${rootpart}"; then
  setenv bootargs "${bootargs} root=${rootfs_partition} rauc.slot=${raucslot}"
  saveenv
else
  echo "No valid RAUC slot found. Resetting tries to 3"
  setenv BOOT_A_LEFT 3
  setenv BOOT_B_LEFT 3
  saveenv
  reset
fi

# Load the kernel
fatload mmc 0:${kernel_partition} ${kernel_addr_r} @@KERNEL_IMAGETYPE@@
if test ! -e mmc 0:${bootpart} uboot.env; then saveenv; fi;

setenv bootargs "${bootargs} loglevel=3"

# Now actually boot the system
@@KERNEL_BOOTCMD@@ ${kernel_addr_r} - ${fdt_addr}